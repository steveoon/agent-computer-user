name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
    paths:
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      - 'package.json'
      - 'tsconfig.json'
      - '.github/workflows/code-review.yml'
      - '.github/scripts/**'

# ÂèñÊ∂à‰πãÂâçËøêË°åÁöÑÂ∑•‰ΩúÊµÅ
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  claude-review:
    # ‰ΩøÁî®Ëá™ÊâòÁÆ° runner Êàñ GitHub ÊâòÁÆ°ÁöÑ runner
    runs-on: ${{ vars.USE_SELF_HOSTED_RUNNER == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ëé∑ÂèñÂÆåÊï¥ÂéÜÂè≤‰ª•ÁîüÊàêÂáÜÁ°ÆÁöÑdiff
        
    - name: Setup dependencies
      run: |
        # ÂÆâË£ÖÂøÖË¶ÅÁöÑÂ∑•ÂÖ∑
        sudo apt-get update
        sudo apt-get install -y jq
        
        # È™åËØÅÂ∑•ÂÖ∑ÂÆâË£Ö
        echo "‚úÖ jq version: $(jq --version)"
        
    - name: Setup Claude Code CLI
      run: |
        echo "üîß Setting up Claude Code CLI..."
        
        # ====== Claude CLI ËÆ§ËØÅÈÖçÁΩÆÈÄâÈ°π ======
        # 
        # ÈÄâÈ°π 1: ‰ΩøÁî®Ëá™ÊâòÁÆ° RunnerÔºàÊé®ËçêÁî®‰∫éÁîü‰∫ßÁéØÂ¢ÉÔºâ
        # - Âú®Ëá™Â∑±ÁöÑÊúçÂä°Âô®‰∏äÈÖçÁΩÆ GitHub Actions Runner
        # - È¢ÑÂÖàÂú® runner ‰∏äÊâßË°å `claude login` ÂÆåÊàêËÆ§ËØÅ
        # - Runner Â∞ÜÂèØ‰ª•‰ΩøÁî®Â∑≤ËÆ§ËØÅÁöÑ Claude CLI
        #
        # ÈÄâÈ°π 2: ‰ΩøÁî® API ËÆ§ËØÅÔºàÂ¶ÇÊûúÂèØÁî®Ôºâ
        # - Âú® GitHub Settings > Secrets ‰∏≠Ê∑ªÂä†ËÆ§ËØÅÂá≠ÊçÆ
        # - ‰æãÂ¶Ç: CLAUDE_API_TOKEN ÊàñÂÖ∂‰ªñËÆ§ËØÅÊñπÂºè
        # if [[ -n "${{ secrets.CLAUDE_API_TOKEN || '' }}" ]]; then
        #   export CLAUDE_API_TOKEN="${{ secrets.CLAUDE_API_TOKEN }}"
        # fi
        #
        # ÈÄâÈ°π 3: ‰ΩøÁî®Ê®°ÊãüÊ®°ÂºèÔºàÈªòËÆ§ÔºåÁî®‰∫éÊµãËØïÔºâ
        # - ‰∏çÈúÄË¶ÅÁúüÂÆûÁöÑ Claude CLI
        # - ËøîÂõûÊ®°ÊãüÁöÑÂÆ°Êü•ÁªìÊûú
        # =====================================
        
        # Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØÁî®ÁöÑËÆ§ËØÅÈÖçÁΩÆ
        # Ê≥®ÊÑè: IDE ÂèØËÉΩ‰ºöË≠¶ÂëäËøô‰∫õ secrets Êó†ÊïàÔºåËøôÊòØÊ≠£Â∏∏ÁöÑ
        # Ëøô‰∫õ secrets ÈúÄË¶ÅÂú® GitHub ‰ªìÂ∫ìÁöÑ Settings > Secrets ‰∏≠ÈÖçÁΩÆ
        # ‰ΩøÁî® || '' Êèê‰æõÈªòËÆ§ÂÄº‰ª•ÈÅøÂÖçËøêË°åÊó∂ÈîôËØØ
        if [[ -n "${{ secrets.CLAUDE_API_TOKEN || '' }}" ]]; then
          echo "üîë Using API token authentication"
          export CLAUDE_API_TOKEN="${{ secrets.CLAUDE_API_TOKEN }}"
        elif [[ -n "${{ secrets.CLAUDE_CONFIG || '' }}" ]]; then
          echo "üîë Using custom configuration"
          mkdir -p ~/.claude
          echo "${{ secrets.CLAUDE_CONFIG }}" | base64 -d > ~/.claude/config.json
        fi
        
        # Â∞ùËØïÂÆâË£Ö Claude CLIÔºàÂ¶ÇÊûúÊèê‰æõ‰∫ÜÂÆâË£ÖURLÔºâ
        # vars.CLAUDE_INSTALL_URL ÊòØ‰ªìÂ∫ìÂèòÈáèÔºåÂú® Settings > Variables ‰∏≠ÈÖçÁΩÆ
        if [[ -n "${{ vars.CLAUDE_INSTALL_URL || '' }}" ]]; then
          echo "üì• Installing Claude CLI from: ${{ vars.CLAUDE_INSTALL_URL }}"
          curl -fsSL "${{ vars.CLAUDE_INSTALL_URL }}" | sh || {
            echo "‚ö†Ô∏è Failed to install Claude CLI"
          }
        fi
        
        # È™åËØÅ Claude CLI ÊòØÂê¶ÂèØÁî®
        if command -v claude >/dev/null 2>&1; then
          echo "‚úÖ Claude CLI is installed"
          claude --version || echo "Version check failed"
        else
          echo "‚ö†Ô∏è Claude CLI not found, using mock mode for testing"
          echo "üí° To use real Claude CLI, please configure one of the authentication options above"
          
          # ÂàõÂª∫Ê®°ÊãüÁöÑ claude ÂëΩ‰ª§Áî®‰∫éÊºîÁ§∫ÂíåÊµãËØï
          mkdir -p /tmp/bin
          cat > /tmp/bin/claude << 'MOCK_EOF'
        #!/bin/bash
        # Mock Claude CLI for testing purposes
        if [[ "$1" == "-p" ]] && [[ "$3" == "--json" ]]; then
          cat << 'JSON_EOF'
        {
          "overall_score": 9,
          "security_issues": [],
          "performance_concerns": [],
          "quality_issues": [],
          "typescript_issues": [],
          "react_issues": [],
          "issues": [],
          "detailed_analysis": "This is a mock review for testing purposes. The code appears to follow best practices.",
          "recommendations": [
            "Continue following TypeScript strict mode",
            "Consider adding more unit tests for new components",
            "Keep monitoring bundle size as the project grows"
          ],
          "approved": true,
          "stats": {
            "files_reviewed": 1,
            "lines_changed": 50,
            "test_coverage_impact": "positive"
          }
        }
        JSON_EOF
        else
          echo "Claude Code CLI (Mock Version)"
          echo "This is a mock implementation for testing GitHub Actions workflow"
        fi
        MOCK_EOF
          chmod +x /tmp/bin/claude
          export PATH="/tmp/bin:$PATH"
          echo "‚úÖ Mock Claude CLI created for demonstration"
        fi
        
    - name: Get changed files
      id: changed-files
      run: |
        # Ëé∑ÂèñPR‰∏≠ÂèòÊõ¥ÁöÑÊñá‰ª∂
        echo "üîç Detecting changed files..."
        git diff --name-only origin/${{ github.base_ref }}..HEAD > changed_files.txt
        
        # ÊòæÁ§∫ÂèòÊõ¥Êñá‰ª∂
        echo "üìù Changed files:"
        cat changed_files.txt
        
        # ËÆæÁΩÆËæìÂá∫
        echo "files=$(cat changed_files.txt | tr '\n' ' ')" >> $GITHUB_OUTPUT
        echo "count=$(cat changed_files.txt | wc -l)" >> $GITHUB_OUTPUT
        
    - name: Run Claude Review
      id: review
      env:
        GITHUB_BASE_REF: ${{ github.base_ref }}
      run: |
        echo "ü§ñ Starting code review for ${{ steps.changed-files.outputs.count }} files..."
        
        # ËøêË°åÂÆ°Êü•ËÑöÊú¨
        if bash .github/scripts/claude-review.sh "${{ steps.changed-files.outputs.files }}"; then
          echo "review_status=success" >> $GITHUB_OUTPUT
        else
          echo "review_status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Review script failed"
        fi
        
        # Ê£ÄÊü•ÁªìÊûúÊñá‰ª∂
        if [ -f review_result.json ]; then
          echo "‚úÖ Review result generated"
          # ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÂà∞ËæìÂá∫
          echo "score=$(jq -r '.overall_score' review_result.json)" >> $GITHUB_OUTPUT
          echo "approved=$(jq -r '.approved' review_result.json)" >> $GITHUB_OUTPUT
          echo "total_issues=$(jq -r '.issues | length' review_result.json)" >> $GITHUB_OUTPUT
        else
          echo "‚ùå No review result found"
          echo "score=0" >> $GITHUB_OUTPUT
          echo "approved=false" >> $GITHUB_OUTPUT
          echo "total_issues=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Post Review Comment
      if: always() && steps.review.outputs.review_status != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // ËØªÂèñÂÆ°Êü•ÁªìÊûú
          let review;
          try {
            const reviewResult = fs.readFileSync('review_result.json', 'utf8');
            review = JSON.parse(reviewResult);
          } catch (error) {
            console.error('Failed to read review result:', error);
            review = {
              overall_score: 0,
              security_issues: [],
              performance_concerns: [],
              quality_issues: [],
              typescript_issues: [],
              react_issues: [],
              issues: [],
              detailed_analysis: 'Failed to generate review due to an error.',
              recommendations: [],
              approved: false,
              error: true
            };
          }
          
          // ÊûÑÂª∫ËØÑËÆ∫ÂÜÖÂÆπ
          let statusEmoji = review.approved ? '‚úÖ' : '‚ùå';
          let statusText = review.approved ? 'APPROVED' : 'CHANGES REQUESTED';
          
          // ÂàõÂª∫ÈóÆÈ¢òÂàÜÁªÑ
          const issueGroups = [
            { name: 'üîí Security Issues', items: review.security_issues || [], emoji: 'üî¥' },
            { name: 'üìò TypeScript Issues', items: review.typescript_issues || [], emoji: 'üü†' },
            { name: '‚öõÔ∏è React/Next.js Issues', items: review.react_issues || [], emoji: 'üü°' },
            { name: '‚ö° Performance Concerns', items: review.performance_concerns || [], emoji: 'üü¢' },
            { name: 'üèóÔ∏è Code Quality Issues', items: review.quality_issues || [], emoji: 'üîµ' }
          ];
          
          // ÁîüÊàêÈóÆÈ¢òËØ¶ÊÉÖ
          let issuesDetail = '';
          for (const group of issueGroups) {
            if (group.items.length > 0) {
              issuesDetail += `\n### ${group.name} (${group.items.length})\n\n`;
              for (const issue of group.items) {
                issuesDetail += `${group.emoji} **[${issue.severity.toUpperCase()}]** ${issue.description}\n`;
                issuesDetail += `   üìç \`${issue.file}:${issue.line}\`\n`;
                issuesDetail += `   üí° ${issue.suggestion}\n`;
                if (issue.code_example) {
                  issuesDetail += `   \`\`\`typescript\n   ${issue.code_example}\n   \`\`\`\n`;
                }
                issuesDetail += '\n';
              }
            }
          }
          
          // ÁîüÊàêÁªüËÆ°‰ø°ÊÅØ
          const stats = review.stats || {};
          let statsInfo = '';
          if (stats.files_reviewed) {
            statsInfo = `
          ### üìä Review Statistics
          - **Files Reviewed:** ${stats.files_reviewed}
          - **Lines Changed:** ${stats.lines_changed || 'N/A'}
          - **Test Coverage Impact:** ${stats.test_coverage_impact || 'unknown'}
          `;
          }
          
          const comment = `## ü§ñ Claude Code Review
          
          ### ${statusEmoji} Review Status: ${statusText}
          
          **Overall Score:** ${review.overall_score}/10 ${review.overall_score >= 8 ? '‚ú®' : '‚ö†Ô∏è'}
          
          <details>
          <summary><b>üìà Issues Summary</b> (Total: ${review.issues ? review.issues.length : 0})</summary>
          
          - üîí Security Issues: ${review.security_issues ? review.security_issues.length : 0}
          - üìò TypeScript Issues: ${review.typescript_issues ? review.typescript_issues.length : 0}
          - ‚öõÔ∏è React/Next.js Issues: ${review.react_issues ? review.react_issues.length : 0}
          - ‚ö° Performance Concerns: ${review.performance_concerns ? review.performance_concerns.length : 0}
          - üèóÔ∏è Code Quality Issues: ${review.quality_issues ? review.quality_issues.length : 0}
          
          </details>
          
          ### üîç Detailed Analysis
          ${review.detailed_analysis || 'No detailed analysis available.'}
          
          ${issuesDetail}
          
          ### ‚úÖ Recommendations
          ${review.recommendations && review.recommendations.length > 0 
            ? review.recommendations.map(rec => `- ${rec}`).join('\n') 
            : '- No specific recommendations at this time.'}
          
          ${statsInfo}
          
          ---
          <sub>ü§ñ Automated review by Claude Code | üîß [Review Configuration](.github/scripts/review-config.json) | üìù [Review Template](.github/templates/review-prompt.md)</sub>`;
          
          // ÂèëÂ∏ÉËØÑËÆ∫
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
          // Â¶ÇÊûúÂÆ°Êü•Â§±Ë¥•ÔºåÊ∑ªÂä†Ê†áÁ≠æ
          if (!review.approved) {
            try {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['needs-changes', 'claude-review-failed']
              });
            } catch (error) {
              console.log('Failed to add labels:', error.message);
            }
          }
          
    - name: Update PR Status Check
      if: always() && steps.review.outputs.review_status != ''
      uses: actions/github-script@v7
      with:
        script: |
          const score = parseInt('${{ steps.review.outputs.score }}') || 0;
          const approved = '${{ steps.review.outputs.approved }}' === 'true';
          const totalIssues = parseInt('${{ steps.review.outputs.total_issues }}') || 0;
          
          // Á°ÆÂÆöÊ£ÄÊü•Áä∂ÊÄÅ
          let conclusion = 'neutral';
          let title = 'Code Review';
          let summary = '';
          
          if (approved && score >= 8) {
            conclusion = 'success';
            title = `Code Review Passed (Score: ${score}/10)`;
            summary = `‚úÖ Code review passed with a score of ${score}/10. No blocking issues found.`;
          } else if (score >= 6) {
            conclusion = 'neutral';
            title = `Code Review Needs Attention (Score: ${score}/10)`;
            summary = `‚ö†Ô∏è Code review completed with a score of ${score}/10. Found ${totalIssues} issues that should be addressed.`;
          } else {
            conclusion = 'failure';
            title = `Code Review Failed (Score: ${score}/10)`;
            summary = `‚ùå Code review failed with a score of ${score}/10. Found ${totalIssues} issues that must be fixed.`;
          }
          
          // ÂàõÂª∫ÊàñÊõ¥Êñ∞Ê£ÄÊü•ËøêË°å
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            check_name: 'Claude Code Review'
          });
          
          const checkParams = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Claude Code Review',
            head_sha: context.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: title,
              summary: summary,
              text: `Please see the PR comments for detailed review feedback.`
            }
          };
          
          if (checks.check_runs.length > 0) {
            await github.rest.checks.update({
              ...checkParams,
              check_run_id: checks.check_runs[0].id
            });
          } else {
            await github.rest.checks.create(checkParams);
          }
          
    - name: Check Review Status
      if: always()
      run: |
        # ËØªÂèñÂÆ°Êü•ÁªìÊûú
        if [ -f review_result.json ]; then
          SCORE=$(jq -r '.overall_score' review_result.json)
          APPROVED=$(jq -r '.approved' review_result.json)
          SECURITY_ISSUES=$(jq -r '.security_issues | length' review_result.json)
          HIGH_SEVERITY=$(jq -r '.issues | map(select(.severity == "high")) | length' review_result.json)
          
          echo "üìä Final Review Status:"
          echo "   Score: $SCORE/10"
          echo "   Approved: $APPROVED"
          echo "   Security Issues: $SECURITY_ISSUES"
          echo "   High Severity Issues: $HIGH_SEVERITY"
          
          # Ê£ÄÊü•ÊòØÂê¶ÈÄöËøá
          if [ "$SECURITY_ISSUES" -gt 0 ]; then
            echo "‚ùå Security issues found - blocking merge"
            exit 1
          fi
          
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "‚ùå High severity issues found - blocking merge"
            exit 1
          fi
          
          if [ "$SCORE" -lt 8 ]; then
            echo "‚ùå Code quality below threshold (8/10) - blocking merge"
            exit 1
          fi
          
          if [ "$APPROVED" != "true" ]; then
            echo "‚ùå Review not approved - blocking merge"
            exit 1
          fi
          
          echo "‚úÖ Code review passed - merge allowed"
        else
          echo "‚ùå No review result found"
          exit 1
        fi
        
    - name: Upload Review Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: claude-review-results
        path: |
          review_result.json
          changed_files.txt
        retention-days: 30